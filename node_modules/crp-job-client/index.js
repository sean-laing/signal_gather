var request = require('hyperquest');
var stream2Buffer = require('stream2buffer');
var extend = require('./lib/extend');
var config = require('./config');

var defaultOptions = {
  url: config.server.url
};

exports =
module.exports =
function Client(options) {
  if (!options)
    options = {};
  options = extend(extend({}, defaultOptions), options);

  var defaultReqOpts = {
    headers: {
      "Content-Type": "application/json"
    }
  };

  if (options.token)
    defaultReqOpts.headers.Authorization = "token " + options.token;
    
  if (options.email && options.password)
    defaultReqOpts.headers.Authorization = "Basic "+
      (new Buffer(options.email+':'+options.password)
        .toString('base64'));

  function jobs (jobId) {
    return {
      show: Show(options, defaultReqOpts, jobId),
      destroy: Destroy(options, defaultReqOpts, jobId)
    };
  }

  jobs.create = create;
  function create(jobDoc, cb) {
    var opts = extend({
      uri: options.url + '/jobs'
    }, defaultReqOpts);

    var req = request.post(opts, function(err, res) {
      if (err)
        throw new Error(err);

      if (res.statusCode !== 201) {
        err = new Error('Response status code is ' + res.statusCode);
        err.status = res.statusCode;
        return cb(err);
      }

      stream2Buffer(req, function (err, body) {
        if (err)
          throw new Error(err);

        cb(err, JSON.parse(body.toString()));
      });
    });

    req.write(JSON.stringify(jobDoc));
    req.end();
  }

  jobs.list = list;
  function list(cb) {
    var opts = extend({
      uri: options.url + '/jobs'
    }, defaultReqOpts);

    var req = request.get(opts, function(err, res) {
      if (err)
        return cb(err);

      if (res.statusCode !== 200) {
        err = new Error('Response status code is ' + res.statusCode);
        err.status = res.statusCode;
        return cb(err);
      }

      stream2Buffer(req, function (err, body) {
        if (err)
          throw new Error(err);

        cb(null, JSON.parse(body.toString()));
      });
    });
  }

  jobs.listStream = listStream;
  function listStream () {
    var opts = extend({
      uri: options.url + '/jobs?stream=true'
    }, defaultReqOpts);

    var req = request.get(opts);
    return req;
  }


  jobs.purge = purge;
  function purge(cb) {
    var opts = extend({
      uri: options.url + '/jobs',
      method: 'DELETE'
    }, defaultReqOpts);

    var req = request.del(opts, function (err, res) {
      if (err)
        throw new Error(err);

      if (res.statusCode != 204) {
        err = new Error('Response status code is ' + res.statusCode);
        err.status = res.statusCode;
        return cb(err);
      }

      cb(null);
    });
  }

  return jobs;
};

function Show (options, defaultReqOpts, jobId) {
  return function show (cb) {
    var opts = extend({
      uri: options.url + '/jobs/' + jobId
    }, defaultReqOpts);

    var req = request.get(opts, function(err, res) {
      if (err)
        throw new Error(err);

      if (res.statusCode !== 200) {
        err = new Error('Response status code is ' + res.statusCode);
        err.status = res.statusCode;
        return cb(err);
      }

      stream2Buffer(req, function (err, body) {
        if (err)
          throw new Error(err);

        cb(err, JSON.parse(body.toString()));
      });
    });
  };
}

function Destroy (options, defaultReqOpts, jobId) {
  return function destroy (cb) {
    var opts = extend({
      uri: options.url + '/jobs/' + jobId,
      method: 'DELETE'
    }, defaultReqOpts);

    var req = request(opts, function (err, res) {
      if (err)
        throw new Error(err);

      if (res.statusCode !== 204) {
        err = new Error('Response status code is ' + res.statusCode);
        err.status = req.statusCode;
        return cb(err);
      }

      cb(null);
    });
  };
}
